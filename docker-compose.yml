services:
  node-bot:
    # TypeScript ソースをウォッチしながら Mineflayer ボットを再起動する開発用サービス
    image: node:22
    # ↑ Mineflayer v4.33.0 以降が要求する Node.js 22 系をベースイメージで確保し、
    #    古い Node.js で互換バージョン（4.25.0 など）がインストールされることによる
    #    プロトコル解析失敗（PartialReadError）を防止する。
    working_dir: /app
    volumes:
      - ./:/app
    extra_hosts:
      - "host.docker.internal:host-gateway" # Windows/macOS/WSL 環境から Paper サーバーへ接続するための名前解決
    env_file:
      - .env
    environment:
      # Mineflayer が Paper と揃った既定バージョンで起動するよう docker-compose 側でもフォールバックを指定する。
      MC_VERSION: ${MC_VERSION:-1.21.1}
      WS_HOST: ${WS_HOST:-0.0.0.0}
      WS_PORT: ${WS_PORT:-8765}
      AGENT_WS_URL: ${AGENT_WS_URL:-ws://python-agent:${AGENT_WS_PORT:-9000}}
    command:
      - bash
      - -lc
      - |
        cd node-bot \
        && npm install \
        && npm run dev
    ports:
      - "8765:8765"
    stdin_open: true
    tty: true

  python-agent:
    # Python エージェントを watchfiles で自動再実行する開発用サービス
    image: python:3.11
    working_dir: /app
    volumes:
      - ./:/app
    extra_hosts:
      - "host.docker.internal:host-gateway" # Python 側が Paper と通信する可能性に備え、同様に名前解決を登録
    env_file:
      - .env
    environment:
      # Node 側が公開する WebSocket ポートを 1 箇所で可変化し、複数環境での疎通設定を単純化する。
      WS_URL: ${WS_URL:-ws://node-bot:${WS_PORT:-8765}}
      AGENT_WS_HOST: ${AGENT_WS_HOST:-0.0.0.0}
      AGENT_WS_PORT: ${AGENT_WS_PORT:-9000}
    command:
      - bash
      - -lc
      - |
        pip install --no-cache-dir -r requirements.txt \
        && cd python \
        && \ 
          # watchfiles CLI ではコマンド全体を 1 引数として渡さないと Python が対話モードで起動してしまい、
          # エージェントがポートをリッスンしないため明示的にクォートする。
          watchfiles --filter python --ignore-paths .venv -- "python agent.py"
    stdin_open: true
    tty: true
